main   : Id
(   : LParen
)   : RParen
{   : LBrace
a   : Id
=   : Assign
new   : Keyword_new
[   : LBracket
100   : Int
,   : Comma
100   : Int
]   : RBracket
;   : Semicolon
b   : Id
=   : Assign
new   : Keyword_new
[   : LBracket
100   : Int
,   : Comma
100   : Int
]   : RBracket
;   : Semicolon
i   : Id
=   : Assign
0   : Int
;   : Semicolon
while   : Keyword_while
(   : LParen
i   : Id
<   : Lt
100   : Int
)   : RParen
{   : LBrace
j   : Id
=   : Assign
0   : Int
;   : Semicolon
while   : Keyword_while
(   : LParen
j   : Id
<   : Lt
100   : Int
)   : RParen
{   : LBrace
a   : Id
[   : LBracket
i   : Id
,   : Comma
j   : Id
]   : RBracket
=   : Assign
i   : Id
+   : Add
j   : Id
;   : Semicolon
b   : Id
[   : LBracket
i   : Id
,   : Comma
j   : Id
]   : RBracket
=   : Assign
i   : Id
-   : Sub
j   : Id
;   : Semicolon
j   : Id
=   : Assign
j   : Id
+   : Add
1   : Int
;   : Semicolon
}   : RBrace
i   : Id
=   : Assign
i   : Id
+   : Add
1   : Int
;   : Semicolon
}   : RBrace
c   : Id
=   : Assign
matrixMultiplication   : Id
(   : LParen
a   : Id
,   : Comma
b   : Id
,   : Comma
100   : Int
,   : Comma
100   : Int
,   : Comma
100   : Int
)   : RParen
;   : Semicolon
i   : Id
=   : Assign
0   : Int
;   : Semicolon
while   : Keyword_while
(   : LParen
i   : Id
<   : Lt
100   : Int
)   : RParen
{   : LBrace
j   : Id
=   : Assign
0   : Int
;   : Semicolon
while   : Keyword_while
(   : LParen
j   : Id
<   : Lt
100   : Int
)   : RParen
{   : LBrace
print   : Keyword_print
c   : Id
[   : LBracket
i   : Id
,   : Comma
j   : Id
]   : RBracket
;   : Semicolon
j   : Id
=   : Assign
j   : Id
+   : Add
1   : Int
;   : Semicolon
}   : RBrace
i   : Id
=   : Assign
i   : Id
+   : Add
1   : Int
;   : Semicolon
}   : RBrace
}   : RBrace
matrixMultiplication   : Id
(   : LParen
A   : Id
,   : Comma
B   : Id
,   : Comma
iSize   : Id
,   : Comma
jSize   : Id
,   : Comma
kSize   : Id
)   : RParen
{   : LBrace
C   : Id
=   : Assign
new   : Keyword_new
[   : LBracket
iSize   : Id
,   : Comma
jSize   : Id
]   : RBracket
;   : Semicolon
i   : Id
=   : Assign
0   : Int
;   : Semicolon
while   : Keyword_while
(   : LParen
i   : Id
<   : Lt
iSize   : Id
)   : RParen
{   : LBrace
j   : Id
=   : Assign
0   : Int
;   : Semicolon
while   : Keyword_while
(   : LParen
j   : Id
<   : Lt
jSize   : Id
)   : RParen
{   : LBrace
C   : Id
[   : LBracket
i   : Id
,   : Comma
j   : Id
]   : RBracket
=   : Assign
0   : Int
;   : Semicolon
k   : Id
=   : Assign
0   : Int
;   : Semicolon
while   : Keyword_while
(   : LParen
k   : Id
<   : Lt
kSize   : Id
)   : RParen
{   : LBrace
C   : Id
[   : LBracket
i   : Id
,   : Comma
j   : Id
]   : RBracket
=   : Assign
C   : Id
[   : LBracket
i   : Id
,   : Comma
j   : Id
]   : RBracket
+   : Add
A   : Id
[   : LBracket
i   : Id
,   : Comma
k   : Id
]   : RBracket
*   : Mul
B   : Id
[   : LBracket
k   : Id
,   : Comma
j   : Id
]   : RBracket
;   : Semicolon
k   : Id
=   : Assign
k   : Id
+   : Add
1   : Int
;   : Semicolon
}   : RBrace
j   : Id
=   : Assign
j   : Id
+   : Add
1   : Int
;   : Semicolon
}   : RBrace
i   : Id
=   : Assign
i   : Id
+   : Add
1   : Int
;   : Semicolon
}   : RBrace
returnVal   : Keyword_returnVal
=   : Assign
C   : Id
;   : Semicolon
}   : RBrace
